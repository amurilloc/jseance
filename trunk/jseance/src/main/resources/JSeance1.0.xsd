<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2008 sp1 (http://www.altova.com) by Administrator (N/A) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:JSeance="http://www.codeseance.com/JSeance1.0" targetNamespace="http://www.codeseance.com/JSeance1.0" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0" xml:lang="en-us">
	<xs:annotation>
		<xs:documentation xml:lang="en">JSeance Template definition for code generation based on XML models and
            transformations
        </xs:documentation>
	</xs:annotation>
	<xs:complexType name="Hierarchical">
		<xs:annotation>
			<xs:documentation>Hierarchical declaration to be inherited by other elements</xs:documentation>
		</xs:annotation>
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Model">
				<xs:annotation>
					<xs:documentation>Loads an XML model into the parent context.

Models can be referenced in JavaScript as Models['name'] or Models['default'] for unnamed models.
                    </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="fileName" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The filename of the model relative to the Models runtime directory.
                            </xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="name" type="xs:string" use="optional" default="default">
						<xs:annotation>
							<xs:documentation>Name of the model if specific model references are needed, the last
                                declared model becomes the current model in the context, make sure to define a model
                                names if you are using multiple input models.
                            </xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="e4XPath" type="xs:string" use="optional">
						<xs:annotation>
							<xs:documentation>The E4X Path of the currentNode, otherwise rootNode becomes the currentNode.
                            </xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="validate" type="xs:boolean">
						<xs:annotation>
							<xs:documentation>Indicates if the parser should validate the XML file against an XSD schema, either included in the XML file or specified in the xsdFileName parameter.
                            </xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="xsdFileName">
						<xs:annotation>
							<xs:documentation>Indicates the name of the XSD file to use if validate is true, relative to the Models runtime directory.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="Text">
				<xs:annotation>
					<xs:documentation>Simple text output to the default text sink.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:string">
							<xs:attribute name="escaping" type="JSeance:StringEscaping">
								<xs:annotation>
									<xs:documentation>Allows text to be escaped for xml, html, sql, etc. See the StringEscaping definition for valid options.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="FileOutput">
				<xs:annotation>
					<xs:documentation>Specifies a file to use as output. All text outputs within children will be written  to the specified file.
                    </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="JSeance:Hierarchical">
							<xs:attribute name="fileName" use="required">
								<xs:annotation>
									<xs:documentation>The filename to create, relative to the Target runtime directory.
                                    </xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="encoding" type="JSeance:FileEncoding" default="UTF-8">
								<xs:annotation>
									<xs:documentation>File eoncoding to use, valid options are: ISO-8859-1, ISO-8859-2, ISO-8859-3, ISO-8859-4, ISO-8859-5, ISO-8859-6, ISO-8859-7, ISO-8859-8, ISO-8859-9, ISO-8859-13, ISO-8859-15, UTF-8, UTF-16, ISO-2022-JP, Shift_JIS, EUC-JP, US-ASCII, GBK, Big5, ISO-2022-CN, ISO-2022-KR, ISO-8859-15, ISO-8859-15.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="writeXMLHeader" type="xs:boolean" default="false">
								<xs:annotation>
									<xs:documentation>Specifies if an XML header needs to be created for the file.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="Conditional">
				<xs:annotation>
					<xs:documentation>Parent node for if--elseif-else functionality.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="If">
							<xs:annotation>
								<xs:documentation>Fist child element of the Conditional node, represents the first comparison statement.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:complexContent>
									<xs:extension base="JSeance:Hierarchical">
										<xs:attribute name="jsExpression" type="xs:string" use="required">
											<xs:annotation>
												<xs:documentation>The JavaScript expression to evaluate.</xs:documentation>
											</xs:annotation>
										</xs:attribute>
									</xs:extension>
								</xs:complexContent>
							</xs:complexType>
						</xs:element>
						<xs:element name="ElseIf" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>Else If conditional</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:complexContent>
									<xs:extension base="JSeance:Hierarchical">
										<xs:attribute name="jsExpression" type="xs:string" use="required">
											<xs:annotation>
												<xs:documentation>The expression to evaluate</xs:documentation>
											</xs:annotation>
										</xs:attribute>
									</xs:extension>
								</xs:complexContent>
							</xs:complexType>
						</xs:element>
						<xs:element name="Else" type="JSeance:Hierarchical" minOccurs="0">
							<xs:annotation>
								<xs:documentation>Else conditional</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="Switch">
				<xs:annotation>
					<xs:documentation>Parent node for  switch-case functionality.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Case" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>Evaluation option for a Switch parent node.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:complexContent>
									<xs:extension base="JSeance:Hierarchical">
										<xs:attribute name="value" type="xs:string" use="required">
											<xs:annotation>
												<xs:documentation>The value required for this case section to execute
                                                </xs:documentation>
											</xs:annotation>
										</xs:attribute>
									</xs:extension>
								</xs:complexContent>
							</xs:complexType>
						</xs:element>
						<xs:element name="Default" type="JSeance:Hierarchical" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The default expression to evaluate if no match is found.
                                </xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="jsExpression" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>The JavaScript expression to evaluate.
                            </xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="Definition">
				<xs:annotation>
					<xs:documentation>Named variable used to send parameters to included templates of for oten-used values. Can be referenced from JavaScript by Definitions['name'].
                    </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="JSeance:Hierarchical">
							<xs:attribute name="name" use="required">
								<xs:annotation>
									<xs:documentation>Name of the definition.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="Include">
				<xs:annotation>
					<xs:documentation>Includes another template file in the current template.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="fileName" use="required">
						<xs:annotation>
							<xs:documentation>File name relative to the Includes runtime directory.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="OutputIterator">
				<xs:annotation>
					<xs:documentation>An XML node iterator relative to the current model node, it text production while iterating over an XML node list.
                    </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="JSeance:Hierarchical">
							<xs:attribute name="e4XPath" use="required">
								<xs:annotation>
									<xs:documentation>The e4XPath from the current node to select a group of nodes to iterate from, e4XPath expression is expected to return a nodegroup.                      </xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="modelName" type="xs:string" default="default">
								<xs:annotation>
									<xs:documentation>The name of the model to use.                                </xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="separator" type="xs:string">
								<xs:annotation>
									<xs:documentation>A separator to use when concatenating data, useful for building text structures such as comma-separated lists.
                                    </xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="JavaScript" type="xs:string">
				<xs:annotation>
					<xs:documentation>Allows custom JavaScript declarations to be embedded into the template.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:element name="Template" type="JSeance:Hierarchical">
		<xs:annotation>
			<xs:documentation>Root element for a JSeance  XML Template</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Include">
		<xs:annotation>
			<xs:documentation>Root element for Included CodeTemplates</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="RequiredDefine" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Declarations to be used in the included template, the runtime enforces these
                            and allow users to quickly identify pre-requisite defines
                        </xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="name" use="required"/>
					</xs:complexType>
				</xs:element>
				<xs:element ref="JSeance:Template"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:simpleType name="FileEncoding">
		<xs:annotation>
			<xs:documentation>Enumeration of valid file encodings</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="ISO-8859-1"/>
			<xs:enumeration value="ISO-8859-2"/>
			<xs:enumeration value="ISO-8859-3"/>
			<xs:enumeration value="ISO-8859-4"/>
			<xs:enumeration value="ISO-8859-5"/>
			<xs:enumeration value="ISO-8859-6"/>
			<xs:enumeration value="ISO-8859-7"/>
			<xs:enumeration value="ISO-8859-8"/>
			<xs:enumeration value="ISO-8859-9"/>
			<xs:enumeration value="ISO-8859-13"/>
			<xs:enumeration value="ISO-8859-15"/>
			<xs:enumeration value="UTF-8"/>
			<xs:enumeration value="UTF-16"/>
			<xs:enumeration value="ISO-2022-JP"/>
			<xs:enumeration value="Shift_JIS"/>
			<xs:enumeration value="EUC-JP"/>
			<xs:enumeration value="US-ASCII"/>
			<xs:enumeration value="GBK"/>
			<xs:enumeration value="Big5"/>
			<xs:enumeration value="ISO-2022-CN"/>
			<xs:enumeration value="ISO-2022-KR"/>
			<xs:enumeration value="ISO-8859-15"/>
			<xs:enumeration value="ISO-8859-15"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="StringEscaping">
		<xs:annotation>
			<xs:documentation>Enumeration of valid string escape opions</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="xml-attribute"/>
			<xs:enumeration value="xml-value"/>
			<xs:enumeration value="html"/>
			<xs:enumeration value="java"/>
			<xs:enumeration value="javascript"/>
			<xs:enumeration value="sql"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
